import psycopg2
import pandas as pd
from datetime import datetime
import os

class DatabaseAnalyzer:
    def __init__(self):
        self.connection = None
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(
                host="localhost",
                database="AWS_Tickit_Database",  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –ë–î
                user="postgres",          # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                password="0000",      # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
                port="5432"
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    def execute_query(self, query, description=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            with self.connection.cursor() as cursor:
                if description:
                    print(f"\n{'='*60}")
                    print(f"üìä {description}")
                    print(f"{'='*60}")
                
                cursor.execute(query)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = cursor.fetchall()
                columns = [desc[0] for desc in cursor.description]
                
                # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
                df = pd.DataFrame(results, columns=columns)
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(df)}")
                print(df.head(10))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
                if len(df) > 0:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"results/query_result_{timestamp}.csv"
                    os.makedirs("results", exist_ok=True)
                    df.to_csv(filename, index=False, encoding='utf-8')
                    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
                
                return df
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        queries = [
            {
                "query": "SELECT * FROM users LIMIT 10;",
                "description": "–ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            },
            {
                "query": "SELECT * FROM events LIMIT 10;",
                "description": "–ü–µ—Ä–≤—ã–µ 10 —Å–æ–±—ã—Ç–∏–π"
            },
            {
                "query": """
                SELECT city, state, COUNT(*) as user_count
                FROM users 
                GROUP BY city, state 
                ORDER BY user_count DESC
                LIMIT 10;
                """,
                "description": "–¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            },
            {
                "query": """
                SELECT e.eventid, e.eventname, e.starttime,
                       v.venuename, v.venuecity, v.venuestate
                FROM events e
                JOIN venue v ON e.venueid = v.venueid
                LIMIT 10;
                """,
                "description": "–°–æ–±—ã—Ç–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–∞—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
            },
            {
                "query": """
                SELECT c.catgroup, c.catname,
                       COUNT(s.saleid) as total_sales,
                       SUM(s.qtysold) as total_tickets,
                       SUM(s.pricepaid) as total_revenue
                FROM sales s
                JOIN events e ON s.eventid = e.eventid
                JOIN category c ON e.catid = c.catid
                GROUP BY c.catgroup, c.catname
                ORDER BY total_revenue DESC;
                """,
                "description": "–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ"
            },
            {
                "query": """
                SELECT EXTRACT(YEAR FROM s.saletime) as year,
                       EXTRACT(MONTH FROM s.saletime) as month,
                       COUNT(s.saleid) as total_sales,
                       SUM(s.pricepaid) as total_revenue
                FROM sales s
                GROUP BY year, month
                ORDER BY year, month;
                """,
                "description": "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º"
            },
            {
                "query": """
                SELECT u.city, u.state,
                       COUNT(s.saleid) as total_purchases,
                       SUM(s.pricepaid) as total_revenue,
                       AVG(s.pricepaid) as avg_check
                FROM users u
                JOIN sales s ON u.userid = s.buyerid
                GROUP BY u.city, u.state
                HAVING COUNT(s.saleid) > 5
                ORDER BY avg_check DESC;
                """,
                "description": "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º"
            },
            {
                "query": """
                SELECT v.venuename, v.venuecity,
                       COUNT(DISTINCT e.eventid) as total_events,
                       SUM(s.pricepaid) as total_revenue
                FROM venue v
                JOIN events e ON v.venueid = e.venueid
                JOIN sales s ON e.eventid = s.eventid
                GROUP BY v.venueid, v.venuename, v.venuecity
                ORDER BY total_revenue DESC
                LIMIT 10;
                """,
                "description": "–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –º–µ—Å—Ç"
            },
            {
                "query": """
                SELECT u.userid, u.username,
                       COUNT(s.saleid) as total_purchases,
                       SUM(s.pricepaid) as total_spent
                FROM users u
                JOIN sales s ON u.userid = s.buyerid
                GROUP BY u.userid, u.username
                ORDER BY total_spent DESC
                LIMIT 10;
                """,
                "description": "–¢–æ–ø-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
            },
            {
                "query": """
                SELECT EXTRACT(HOUR FROM s.saletime) as hour_of_day,
                       COUNT(s.saleid) as total_sales,
                       AVG(s.pricepaid) as avg_sale_amount
                FROM sales s
                GROUP BY EXTRACT(HOUR FROM s.saletime)
                ORDER BY hour_of_day;
                """,
                "description": "–ü—Ä–æ–¥–∞–∂–∏ –ø–æ —á–∞—Å–∞–º –¥–Ω—è"
            }
        ]
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}")
        print("-" * 60)
        
        for i, query_info in enumerate(queries, 1):
            print(f"\nüîπ –ó–∞–ø—Ä–æ—Å {i}/{len(queries)}")
            self.execute_query(query_info["query"], query_info["description"])
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = None
    try:
        analyzer = DatabaseAnalyzer()
        analyzer.run_analysis()
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if analyzer:
            analyzer.close()

if __name__ == "__main__":
    main()